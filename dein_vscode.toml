# Vim Settings

# ========================================
hook_add = '''
'''

# Filetype Specific
# ----------------------------------------
help = '''
nnoremap <buffer> <CR> <C-]>
nnoremap <buffer> <BS> <C-T>
nnoremap <buffer> o /'\l\{2,\}'<CR>
nnoremap <buffer> O ?'\l\{2,\}'<CR>
nnoremap <buffer> s /\|\zs\S\+\ze\|<CR>
nnoremap <buffer> S ?\|\zs\S\+\ze\|<CR>
'''


# The Plugin Manager
# ========================================
[[plugins]]
repo = 'Shougo/dein.vim'
lazy = true
on_cmd = 'DeinSource'
hook_add = '''
" for ftplugin to be updated on vimrc change
let g:dein#auto_recache = v:true

let s:token_file = stdpath('data') . '.dein_github_update_token'
if filereadable(s:token_file)
  let g:dein#install_github_api_token = readfile(s:token_file,'', 1)
  autocmd VimEnter * call dein#check_update()
endif

command! -nargs=1 DeinSource call dein#source(<f-args>)

" echo 'dein.vim hook_add loaded'
'''

# vim-plug like ui
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
depends = 'dein.vim'
on_cmd = 'DeinUpdate'

# Fundamental Dependencies
# ========================================

# denops
# ----------------------------------------
[[plugins]]
repo = 'vim-denops/denops.vim'

# lua for nvim
# ----------------------------------------
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
lazy = false
if = 'has("nvim")'


# UI
# ========================================

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
" jumping around the code
let g:Easymotion_do_mapping = 0
" " move to {char}
" map f <Plug>(easymotion-bd-f)
" map 2f <Plug>(easymotion-bd-f2)
" " Move to word
" map  gw <Plug>(easymotion-bd-w)
" " Move to line
" map gj <Plug>(easymotion-bd-jk)

" comments using vscode features
xmap gc  <Plug>VSCodeCommentary
nmap gc  <Plug>VSCodeCommentary
omap gc  <Plug>VSCodeCommentary
nmap gcc <Plug>VSCodeCommentaryLine
'''

# Vim code inspection plugin for finding definitionshammer_and_pick and references/usagesmicroscope.
[[plugins]]
repo = 'pechorin/any-jump.vim'
lazy = true
on_cmd = ['AnyJump', 'AnyJumpVisual', 'AnyBumpback', 'AnyJumpLastResults']
hook_add = '''
let g:any_jump_disable_default_keybindings = 1

" Normal mode: Jump to definition under cursor
nnoremap <leader>aj :AnyJump<CR>

" Visual mode: jump to selected text in visual mode
xnoremap <leader>aj :AnyJumpVisual<CR>

" Normal mode: open previous opened file (after jump)
nnoremap <leader>ab :AnyJumpBack<CR>

" Normal mode: open last closed search window again
nnoremap <leader>al :AnyJumpLastResults<CR>

" echo g:dein#plugin.name . ' hook_add loaded'
'''

# Text Editing
# ========================================

# deal with camelCase and snake_case
[[plugins]]
repo = 'chaoren/vim-wordmotion'
lazy = false

# align things like =
[[plugins]]
repo = 'junegunn/vim-easy-align'
lazy = true
on_map = '<Plug>(LiveEasyAlign)'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(LiveEasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(LiveEasyAlign)
" echo g:dein#plugin.name . ' hook_add loaded'
'''

# run commands only in visual block with :<,>B
[[plugins]]
repo = 'vim-scripts/vis'
lazy = true
hook_add = '''
vnoremap : :B<Space>

" echo g:dein#plugin.name . ' hook_add loaded'
'''

# surround textobjects with parentheses
[[plugins]]
repo = 'machakann/vim-sandwich'
lazy = true
on_map = 's'
hook_post_source = '''
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

" echo g:dein#plugin.name . ' hook_post_source loaded'
'''

# Git
# ========================================

# git情報を左に表示
[[plugins]]
repo = 'airblade/vim-gitgutter'
lazy = false
# hook_add = '''
# " echo g:dein#plugin.name . ' hook_add loaded'
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
lazy = true
on_cmd = ['Git', 'Gvdiffsplit']

[[plugins]]
repo = 'TimUntersberger/neogit'
lazy = true
if = 'has("nvim")'
on_cmd = 'Neogit'
depends = 'plenary.nvim'
hook_add = '''
nnoremap <Leader>g :Neogit<CR>
" echo g:dein#plugin.name . ' hook_post_source loaded'
'''
hook_post_source = '''
lua << EOF
require('neogit').setup{}
EOF

" echo g:dein#plugin.name . ' hook_post_source loaded'
'''

# [[plugins]]
# repo = 'tpope/vim-fugitive'
# lazy = true
# hook_add = '''

# " echo g:dein#plugin.name . ' hook_add loaded'
# '''

# Miscellaneous
# ========================================

# キーバインドを表示
[[plugins]]
repo = 'liuchengxu/vim-which-key'
lazy = false
if = '!has("nvim")'

[[plugins]]
repo = 'folke/which-key.nvim'
lazy = true
if = 'has("nvim")'
augroup = 'config'
on_event = 'VimEnter'
hook_post_source = '''

noremap ? :WhichKey<CR>

lua << EOF
require('which-key').setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    plugins = {
      spelling = {
        enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
      },
    },
  }
EOF

" echo g:dein#plugin.name . ' hook_post_source loaded'
'''
